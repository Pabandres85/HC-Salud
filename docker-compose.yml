# ==========================================
# Docker Compose optimizado 
# ==========================================

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: psicologia-frontend
    ports:
      - "${FRONTEND_PORT:-4200}:80"
    environment:
      - NODE_ENV=production
      - API_URL=http://backend:5000/api
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - psicologia-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: psicologia-backend
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:5000
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
    depends_on:
      db:
        condition: service_healthy
    command: ["dotnet", "Backend.dll", "--migrate"]
    volumes:
      - ~/.aspnet/https:/root/.aspnet/https:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - psicologia-network

  db:
    image: postgres:14-alpine
    container_name: psicologia-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - psicologia_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - psicologia-network

  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: psicologia-ai-service
    ports:
      - "${AI_PORT:-7000}:7000"
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=development
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - psicologia-network

networks:
  psicologia-network:
    driver: bridge

volumes:
  psicologia_data: