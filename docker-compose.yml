version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: psicologia-frontend
    ports:
      - "${FRONTEND_PORT}:80"
    environment:
      NODE_ENV: production
      API_URL: http://backend:5000/api
    depends_on:
      - backend
    networks:
      - psicologia-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: psicologia-backend
    ports:
      - "${BACKEND_PORT}:5000"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings:DefaultConnection: "Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      Jwt:Key: "${JWT_KEY}"
      Jwt:Issuer: "${JWT_ISSUER}"
    depends_on:
      db:
        condition: service_healthy
    command: ["dotnet", "Backend.dll", "--migrate", "--urls", "http://0.0.0.0:5000"]
    volumes:
      - ~/.aspnet/https:/root/.aspnet/https:ro
    networks:
      - psicologia-network

  db:
    image: postgres:14-alpine
    container_name: psicologia-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - psicologia_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - psicologia-network

  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: psicologia-ai-service
    ports:
      - "${AI_PORT}:7000"
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - psicologia-network

networks:
  psicologia-network:
    driver: bridge

volumes:
  psicologia_data: